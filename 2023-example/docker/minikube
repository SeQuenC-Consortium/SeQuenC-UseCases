---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: broker
  name: broker
  namespace: default
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    io.kompose.service: broker
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: camunda-engine
  name: camunda-engine
  namespace: default
spec:
  ports:
    - name: "8090"
      port: 8090
      targetPort: 8080
  selector:
    io.kompose.service: camunda-engine
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: circuit-generation-service
  name: circuit-generation-service
  namespace: default
spec:
  ports:
    - name: "5073"
      port: 5073
      targetPort: 5073
  selector:
    io.kompose.service: circuit-generation-service
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
  namespace: default
spec:
  ports:
    - name: "5432"
      port: 5432
      targetPort: 5432
  selector:
    io.kompose.service: postgres
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.service.expose: "true"
    kompose.service.type: loadbalancer
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: server-tcp
  name: server-tcp
  namespace: default
spec:
  ports:
    - name: "5005"
      port: 5005
      targetPort: 5005
  selector:
    io.kompose.service: server
  type: LoadBalancer
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: worker
  name: worker
  namespace: default
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    io.kompose.service: worker
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: workflow-modeler
  name: workflow-modeler
  namespace: default
spec:
  ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
  selector:
    io.kompose.service: workflow-modeler
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: broker
  name: broker
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: broker
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-qunicorn: "true"
        io.kompose.service: broker
    spec:
      containers:
        - image: redis:7.0.12
          name: broker
          ports:
            - containerPort: 6379
              hostPort: 6379
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: camunda-engine
  name: camunda-engine
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: camunda-engine
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-qunicorn: "true"
        io.kompose.service: camunda-engine
    spec:
      containers:
        - image: camunda/camunda-bpm-platform:run-7.19.0
          name: camunda-engine
          ports:
            - containerPort: 8080
              hostPort: 8090
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: circuit-generation-service
  name: circuit-generation-service
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: circuit-generation-service
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-qunicorn: "true"
        io.kompose.service: circuit-generation-service
    spec:
      containers:
        - image: planqk/quantum-circuit-generator:latest
          name: circuit-generation-service
          ports:
            - containerPort: 5073
              hostPort: 5073
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: postgres
  name: postgres
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-qunicorn: "true"
        io.kompose.service: postgres
    spec:
      containers:
        - env:
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_DB
              value: qunicorn
            - name: POSTGRES_PASSWORD
              value: passwd
          image: postgres:15.3
          name: postgres
          ports:
            - containerPort: 5432
              hostPort: 5432
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.service.expose: "true"
    kompose.service.type: loadbalancer
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: server
  name: server
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: server
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
        kompose.service.expose: "true"
        kompose.service.type: loadbalancer
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-qunicorn: "true"
        io.kompose.service: server
    spec:
      containers:
        - env:
            - name: BROKER_URL
              value: redis://broker:6379
            - name: CONTAINER_MODE
              value: server
            - name: DB_URL
              value: postgresql://postgres:passwd@postgres/qunicorn
            - name: SERVER_PORT
              value: "5005"
          image: qunicorn:local
          name: server
          ports:
            - containerPort: 5005
              hostPort: 5005
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: worker
  name: worker
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: worker
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-qunicorn: "true"
        io.kompose.service: worker
    spec:
      containers:
        - env:
            - name: BROKER_URL
              value: redis://broker:6379
            - name: CONTAINER_MODE
              value: worker
            - name: DB_URL
              value: postgresql://postgres:passwd@postgres/qunicorn
          image: qunicorn:local
          name: worker
          ports:
            - containerPort: 6379
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
    kompose.version: 1.30.0 (9d8dcb518)
  creationTimestamp: null
  labels:
    io.kompose.service: workflow-modeler
  name: workflow-modeler
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: workflow-modeler
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml --out minikube
        kompose.version: 1.30.0 (9d8dcb518)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-qunicorn: "true"
        io.kompose.service: workflow-modeler
    spec:
      containers:
        - env:
            - name: CAMUNDA_ENDPOINT
              value: http://:8090/engine-rest
            - name: ENABLE_DATA_FLOW_PLUGIN
              value: "false"
            - name: ENABLE_PLANQK_PLUGIN
              value: "false"
            - name: ENABLE_QHANA_PLUGIN
              value: "false"
            - name: ENABLE_QUANTME_PLUGIN
              value: "true"
          image: iaasgeorgdl/workflow-modeler:release.11.23
          name: workflow-modeler
          ports:
            - containerPort: 8080
              hostPort: 8080
              protocol: TCP
          resources: {}
      restartPolicy: Always
status: {}
