version: "3"

services:
  ### Workflow Modeler ###
  workflow-modeler:
    image: planqk/workflow-modeler:v0.1.8
    environment:
      CAMUNDA_ENDPOINT: http://$PUBLIC_HOSTNAME:8090/engine-rest
      ENABLE_DATA_FLOW_PLUGIN: "false"
      ENABLE_PLANQK_PLUGIN: "false"
      ENABLE_QHANA_PLUGIN: "false"
      ENABLE_QUANTME_PLUGIN: "true"
      QRM_USERNAME: ${GITHUB_USER}
      QRM_REPONAME: "QuantME-UseCases"
      QRM_REPOPATH: "2023-icwe/qrms"
      OPENTOSCA_ENDPOINT: http://$PUBLIC_HOSTNAME:1337/csars
      WINERY_ENDPOINT: http://$PUBLIC_HOSTNAME:8093/winery
    ports:
      - 8080:8080
    networks:
      - sequenc-tutorial
  ### Camunda Engine ###
  camunda-engine:
    image: camunda/camunda-bpm-platform:run-7.19.0
    ports:
      - 8090:8080
    networks:
      - sequenc-tutorial
  ### OpenTOSCA Ecosystem ###
  winery:
    image: opentosca/winery:v3.0.0-M1
    logging:
      driver: none
    ports:
      - "8093:8080"
    environment:
      WINERY_HOSTNAME: $PUBLIC_HOSTNAME
      WORKFLOWMODELER_HOSTNAME: $PUBLIC_HOSTNAME
      TOPOLOGYMODELER_HOSTNAME: $PUBLIC_HOSTNAME
      CONTAINER_HOSTNAME: $PUBLIC_HOSTNAME
    networks:
      - sequenc-tutorial
  ### Quokka Ecosystem ###
  quokka-gateway:
    image: planqk/quokka-gateway:0.2.0
    ports:
      - "6474:6474"
    networks:
      - sequenc-tutorial
  execution-service:
    image: planqk/execution-service:v0.2.0
    ports:
      - "5075:5075"
    networks:
      - sequenc-tutorial
  optimization-service:
    image: planqk/optimization-service:v0.3.0
    ports:
      - "5074:5074"
    environment:
      CAMUNDA_ENDPOINT: http://$PUBLIC_HOSTNAME:8090/engine-rest
    networks:
      - sequenc-tutorial
  objective-evaluation-service:
    image: planqk/objective-evaluation-service:v0.2.0
    ports:
      - "5072:5072"
    networks:
      - sequenc-tutorial
  circuit-generation-service:
    image: planqk/quantum-circuit-generator:v0.2.0
    ports:
      - "5073:5073"
    networks:
      - sequenc-tutorial
  circuit-cutting-service:
    image: planqk/circuit-cutting-service:v0.1.0
    ports:
      - "5076:5076"
    networks:
      - sequenc-tutorial
  warm-starting-service:
    image: planqk/warm-starting-service:v0.1.0
    ports:
      - "5077:5077"
    networks:
      - sequenc-tutorial
  distance-matrix:
    image: planqk/distance-matrix-app:v1.0.0
    ports:
      - "5078:8101"
    networks:
      - sequenc-tutorial
  map-generation:
    image: planqk/map-generation-app:v1.0.0
    ports:
      - "5079:8102"
    networks:
      - sequenc-tutorial

  qunicorn:
    image: "iaasgeorgdl/dbtest:test"
    networks:
      - sequenc-tutorial
    environment:
      CONTAINER_MODE: server
      SERVER_PORT: 5005
      BROKER_URL: "redis://broker:6379"
      DB_URL: "postgresql://postgres:passwd@postgres/qunicorn"
      JWKS_URL: "http://keycloak:8081/auth/realms/qunicorn/protocol/openid-connect/certs"
      NUMBA_CACHE_DIR: "/app/cache"
    depends_on:
      - postgres
      - broker
      - worker
    ports:
      - "5005:5005"

  worker:
    image: "iaasgeorgdl/dbtest:test"
    networks:
      - sequenc-tutorial
    environment:
      CONTAINER_MODE: worker
      BROKER_URL: "redis://broker:6379"
      DB_URL: "postgresql://postgres:passwd@postgres/qunicorn"
      NUMBA_CACHE_DIR: "/app/cache"
    depends_on:
      - postgres
      - broker
    ports:
      - "6379"

  # Standard Keycloak container, realm export is the qunicorn realm
  keycloak:
    image: jboss/keycloak
    networks:
      - sequenc-tutorial
    depends_on:
      - keycloak_postgres
    ports:
      - "8091:8080"
    volumes:
      - "./resources/keycloak-realm-export.json:/tmp/realm-export.json"
    environment:
      DB_VENDOR: postgres
      KEYCLOAK_USER: kc_user
      KEYCLOAK_PASSWORD: kc_pass
      DB_ADDR: keycloak_postgres
      DB_USER: postgres
      DB_PASSWORD: passwd
      KEYCLOAK_IMPORT=/tmp/realm-export.json:

  # Database for the keycloak realms and users
  keycloak_postgres:
    image: postgres:15.3
    networks:
      - sequenc-tutorial
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD: passwd
      POSTGRES_DB: keycloak
    volumes:
      - keycloak_pgdata:/var/lib/postgresql/data \

  # Broker for the Celery (Pilot-Job) setup
  broker:
    image: redis:7.0.12
    networks:
      - sequenc-tutorial
    ports:
      - "6379:6379"

  # postgres container for the database for Qunicorn jobs and deployments
  postgres:
    image: postgres:15.3
    networks:
      - sequenc-tutorial
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD: passwd
      POSTGRES_DB: qunicorn
    volumes:
      - pgdata:/var/lib/postgresql/data \
    ports:
      - "5432:5432"

  # QC-Atlas UI which is based on the enhancement of the execution Service via Qunicorn
  qc-atlas-ui:
    image: "iaasgeorgdl/qc-atlas-ui:release"
    depends_on:
      - config-server
    environment:
      # because the requests are performed from the browser and not
      # from the container itself we have to specify localhost here
      # and **not** the container name
      QC_ATLAS_HOST_NAME: localhost
      QC_ATLAS_PORT: 6626
      PATTERN_ATLAS_HOST_NAME: localhost
      PATTERN_ATLAS_PORT: 1977
      PATTERN_ATLAS_UI_HOST_NAME: localhost
      PATTERN_ATLAS_UI_PORT: 1978
      NISQ_ANALYZER_HOST_NAME: localhost
      NISQ_ANALYZER_PORT: 5010
      QPROV_HOST_NAME: localhost
      QPROV_PORT: 5020
      LATEX_RENDERER_HOST_NAME: localhost
      LATEX_RENDERER_PORT: 5030
    ports:
      - "80:80"
    volumes:
      - ./config:/opt/init-config.d
    networks:
      - sequenc-tutorial

  # QC-Atlas API
  qc-atlas:
    image: aldekal/qc-atlas:bloqcat
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5060
      POSTGRES_USER: planqk
      POSTGRES_PASSWORD: planqk
      POSTGRES_DB: planqk
    ports:
      - "6626:6626"
    networks:
      - sequenc-tutorial

  # Config server f√ºr Qc-Atlas
  config-server:
    image: quay.io/coreos/etcd:latest
    environment:
      ETCD_NAME: config-node1
      ETCD_CORS: "*"
      ETCD_ADVERTISE_CLIENT_URLS: "http://config-server:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
      ETCDCTL_API: 3
    ports:
      - "2379:2379"
    networks:
      - sequenc-tutorial

networks:
  sequenc-tutorial:
    driver: bridge

volumes:
  pgdata:
  keycloak_pgdata:
